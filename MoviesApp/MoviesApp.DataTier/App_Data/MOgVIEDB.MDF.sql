/*
Deployment script for C:\USERS\PERKINSD\DOCUMENTS\VISUAL STUDIO 2015\PROJECTS\MOVIESAPP\MOVIESAPP.DATATIER\APP_DATA\MOVIEDB.MDF

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "C:\USERS\PERKINSD\DOCUMENTS\VISUAL STUDIO 2015\PROJECTS\MOVIESAPP\MOVIESAPP.DATATIER\APP_DATA\MOVIEDB.MDF"
:setvar DefaultFilePrefix "C_\USERS\PERKINSD\DOCUMENTS\VISUAL STUDIO 2015\PROJECTS\MOVIESAPP\MOVIESAPP.DATATIER\APP_DATA\MOVIEDB.MDF_"
:setvar DefaultDataPath "C:\Users\PerkinsD\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\PerkinsD\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[ActorMovieRelationships]...';


GO
CREATE TABLE [dbo].[ActorMovieRelationships] (
    [ActorMovieRelationshipID] INT      IDENTITY (1, 1) NOT NULL,
    [MovieID]                  CHAR (9) NOT NULL,
    [ActorID]                  INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([ActorMovieRelationshipID] ASC)
);


GO
PRINT N'Creating [dbo].[Actors]...';


GO
CREATE TABLE [dbo].[Actors] (
    [ActorID] INT          IDENTITY (1, 1) NOT NULL,
    [Name]    VARCHAR (50) NOT NULL,
    [Age]     INT          NULL,
    PRIMARY KEY CLUSTERED ([ActorID] ASC)
);


GO
PRINT N'Creating [dbo].[ActorTags]...';


GO
CREATE TABLE [dbo].[ActorTags] (
    [ActorTagID]     INT          IDENTITY (1, 1) NOT NULL,
    [TagDescription] VARCHAR (20) NOT NULL,
    [ActorID]        INT          NULL,
    PRIMARY KEY CLUSTERED ([ActorTagID] ASC)
);


GO
PRINT N'Creating [dbo].[Movies]...';


GO
CREATE TABLE [dbo].[Movies] (
    [MovieID]    CHAR (9)      NOT NULL,
    [Title]      VARCHAR (150) NOT NULL,
    [Year]       DATETIME2 (7) NULL,
    [Rated]      VARCHAR (5)   NOT NULL,
    [Released]   DATETIME      NULL,
    [Genre]      VARCHAR (50)  NOT NULL,
    [Director]   VARCHAR (50)  NOT NULL,
    [Writer]     VARCHAR (50)  NOT NULL,
    [Plot]       VARCHAR (500) NOT NULL,
    [Language]   VARCHAR (50)  NOT NULL,
    [Country]    VARCHAR (10)  NOT NULL,
    [Awards]     VARCHAR (250) NOT NULL,
    [Poster]     VARCHAR (500) NOT NULL,
    [Metascore]  INT           NOT NULL,
    [ImdbRating] FLOAT (53)    NOT NULL,
    [ImdbVotes]  INT           NOT NULL,
    [Type]       VARCHAR (10)  NOT NULL,
    [Response]   VARCHAR (10)  NOT NULL,
    PRIMARY KEY CLUSTERED ([MovieID] ASC)
);


GO
PRINT N'Creating [dbo].[MovieTags]...';


GO
CREATE TABLE [dbo].[MovieTags] (
    [MovieTagID]     INT          IDENTITY (1, 1) NOT NULL,
    [TagDescription] VARCHAR (20) NOT NULL,
    [MovieID]        CHAR (9)     NULL,
    PRIMARY KEY CLUSTERED ([MovieTagID] ASC)
);


GO
PRINT N'Creating [dbo].[FK_ActorMovieRelationships_ActorID_Actors_ActorID]...';


GO
ALTER TABLE [dbo].[ActorMovieRelationships]
    ADD CONSTRAINT [FK_ActorMovieRelationships_ActorID_Actors_ActorID] FOREIGN KEY ([ActorID]) REFERENCES [dbo].[Actors] ([ActorID]);


GO
PRINT N'Creating [dbo].[FK_ActorMovieRelationships_MovieID_Movies_MovieID]...';


GO
ALTER TABLE [dbo].[ActorMovieRelationships]
    ADD CONSTRAINT [FK_ActorMovieRelationships_MovieID_Movies_MovieID] FOREIGN KEY ([MovieID]) REFERENCES [dbo].[Movies] ([MovieID]);


GO
PRINT N'Creating [dbo].[FK_ActorTags_ActorID_Actors_ActorID]...';


GO
ALTER TABLE [dbo].[ActorTags]
    ADD CONSTRAINT [FK_ActorTags_ActorID_Actors_ActorID] FOREIGN KEY ([ActorID]) REFERENCES [dbo].[Actors] ([ActorID]);


GO
PRINT N'Creating [dbo].[FK_MovieTags_MovieID_Movie_MovieID]...';


GO
ALTER TABLE [dbo].[MovieTags]
    ADD CONSTRAINT [FK_MovieTags_MovieID_Movie_MovieID] FOREIGN KEY ([MovieID]) REFERENCES [dbo].[Movies] ([MovieID]);


GO
PRINT N'Creating [dbo].[AMRSEEDER]...';


GO
CREATE PROCEDURE [dbo].[AMRSEEDER]
	@param1 int = 0,
	@param2 int
AS
SET IDENTITY_INSERT [dbo].[ActorMovieRelationships] ON
INSERT INTO [dbo].[ActorMovieRelationships] ([ActorMovieRelationshipID], [MovieID], [ActorID]) VALUES (1, N'tt1201607', 1)
INSERT INTO [dbo].[ActorMovieRelationships] ([ActorMovieRelationshipID], [MovieID], [ActorID]) VALUES (2, N'tt0076759', 2)
SET IDENTITY_INSERT [dbo].[ActorMovieRelationships] OFF
SET IDENTITY_INSERT [dbo].[Actors] ON
INSERT INTO [dbo].[Actors] ([ActorID], [Name], [Age]) VALUES (1, N'Alan Rickman', 67)
INSERT INTO [dbo].[Actors] ([ActorID], [Name], [Age]) VALUES (2, N'Mark Hamill', 65)
SET IDENTITY_INSERT [dbo].[Actors] OFF
INSERT INTO [dbo].[Movies] ([MovieID], [Title], [Year], [Rated], [Released], [Genre], [Director], [Writer], [Plot], [Language], [Country], [Awards], [Poster], [Metascore], [ImdbRating], [ImdbVotes], [Type], [Response]) VALUES (N'tt0076759', N'Star Wars: Episode IV - A New Hope', NULL, N'PG', NULL, N'Action, Adventure, Fantasy', N'George Lucas', N'George Lucas', N'Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a wookiee and two droids to save the galaxy from the Empire''s world-destroying battle-station, while also attempting to rescue Princess Leia from the evil Darth Vader.', N'English', N'USA', N'Won 6 Oscars. Another 48 wins & 28 nominations.', N'https:\/\/images-na.ssl-images-amazon.com\/images\/M\/MV5BYzQ2OTk4N2QtOGQwNy00MmI3LWEwNmEtOTk0OTY3NDk2MGJkL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNjc1NTYyMjg@._V1_SX300.jpg', 92, 8.7, 0, N'movie', N'True')
INSERT INTO [dbo].[Movies] ([MovieID], [Title], [Year], [Rated], [Released], [Genre], [Director], [Writer], [Plot], [Language], [Country], [Awards], [Poster], [Metascore], [ImdbRating], [ImdbVotes], [Type], [Response]) VALUES (N'tt1201607', N'Harry Potter and the Deathly Hallows: Part 2', NULL, N'PG-13', NULL, N'Adventure, Drama, Fantasy', N'David Yates', N'Steve Kloves (screenplay), J.K. Rowling (novel)', N'Harry, Ron and Hermione search for Voldemort''s remaining Horcruxes in their effort to destroy the Dark Lord as the final battle rages on at Hogwarts.', N'English', N'USA, UK', N'Nominated for 3 Oscars. Another 46 wins & 87 nominations.', N'https:\/\/images-na.ssl-images-amazon.com\/images\/M\/MV5BMTY2MTk3MDQ1N15BMl5BanBnXkFtZTcwMzI4NzA2NQ@@._V1_SX300.jpg', 87, 8.1, 0, N'movie', N'True')
RETURN 0
GO
PRINT N'Creating [dbo].[usp_DelActorMovieRelationship]...';


GO
CREATE PROCEDURE [dbo].[usp_DelActorMovieRelationship]
	@ActorMovieRelationshipID  int
AS
	DELETE FROM ActorMovieRelationships
	WHERE ActorMovieRelationshipID = @ActorMovieRelationshipID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_DelActorTag]...';


GO
CREATE PROCEDURE [dbo].[usp_DelActorTag]
	@id int
AS
	DELETE FROM ActorTags
	WHERE ActorTagID = @id
RETURN 0
GO
PRINT N'Creating [dbo].[usp_DelMovieTag]...';


GO
CREATE PROCEDURE [dbo].[usp_DelMovieTag]
	@id int
AS
	DELETE FROM MovieTags
	WHERE MovieTagID = @id
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetActorById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetActorById]
	@id int
AS
	SELECT * 
	FROM Actors a
	JOIN ActorMovieRelationships amr
	ON amr.ActorID = a.ActorID
	JOIN Movies m
	ON m.MovieID = amr.MovieID
	WHERE a.ActorID = @id
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetActorByName]...';


GO
CREATE PROCEDURE [dbo].[usp_GetActorByName]
	@name varchar(50)
AS
	SELECT *
	FROM Actors a
	JOIN ActorMovieRelationships amr
	ON amr.ActorID = a.ActorID
	JOIN Movies m
	ON m.MovieID = amr.MovieID
	WHERE a.Name = @name
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetActorMovieRelationshipByActor]...';


GO
CREATE PROCEDURE [dbo].[usp_GetActorMovieRelationshipByActor]
	@ActorID int
AS
	SELECT *
	FROM ActorMovieRelationships
	WHERE ActorID = @ActorID 
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetActorMovieRelationshipById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetActorMovieRelationshipById]
	@ActorMovieRelationshipID int
AS
	SELECT * 
	FROM ActorMovieRelationships
	WHERE ActorMovieRelationshipID = @ActorMovieRelationshipID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetActorMovieRelationshipByMovie]...';


GO
CREATE PROCEDURE [dbo].[usp_GetActorMovieRelationshipByMovie]
	@MovieID char(9)
AS
	SELECT *
	FROM ActorMovieRelationships
	WHERE MovieID = @MovieID 
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetActorTagById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetActorTagById]
	@id int
AS
	SELECT * 
	FROM ActorTags
	WHERE ActorTags.ActorTagID = @id
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetAllActors]...';


GO
CREATE PROCEDURE [dbo].[usp_GetAllActors]
AS
	SELECT *
	FROM Actors a
	JOIN ActorMovieRelationships amr
	ON amr.ActorID = a.ActorID
	JOIN Movies m
	ON m.MovieID = amr.MovieID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetAllActorTags]...';


GO
CREATE PROCEDURE [dbo].[usp_GetAllActorTags]
AS
	SELECT *
	FROM ActorTags
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetAllMovies]...';


GO
CREATE PROCEDURE [dbo].[usp_GetAllMovies]
AS
	SELECT *
	FROM dbo.Movies m
	JOIN dbo.ActorMovieRelationships amr
	ON amr.MovieID = m.MovieID
	JOIN dbo.Actors a
	ON a.ActorID = amr.ActorID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetAllMovieTags]...';


GO
CREATE PROCEDURE [dbo].[usp_GetAllMovieTags]
AS
	SELECT *
	FROM MovieTags
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetMovieByTitle]...';


GO
CREATE PROCEDURE [dbo].[usp_GetMovieByTitle]
	@title varchar(150)
AS
	SELECT *
	FROM dbo.Movies m
	JOIN dbo.ActorMovieRelationships amr
	ON amr.MovieID = m.MovieID
	JOIN dbo.Actors a
	ON a.ActorID = amr.ActorID
	WHERE m.Title = @title

RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetMoviesById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetMoviesById]
	@id char(9)
AS
	SELECT * 
	FROM dbo.Movies m
	JOIN dbo.ActorMovieRelationships amr
	ON amr.MovieID = m.MovieID
	JOIN dbo.Actors a
	ON a.ActorID = amr.ActorID
	WHERE m.MovieID = @id
RETURN 0
GO
PRINT N'Creating [dbo].[usp_GetMovieTagById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetMovieTagById]
	@id int
AS
	SELECT * 
	FROM MovieTags
	WHERE MovieTagID = @id
RETURN 0
GO
PRINT N'Creating [dbo].[usp_InsActor]...';


GO
CREATE PROCEDURE [dbo].[usp_InsActor]
	@name varchar(50),
	@age int
AS
	INSERT INTO Actors (Name, Age)
	VALUES (@name, @age)
RETURN 0
GO
PRINT N'Creating [dbo].[usp_InsActorMovieRelationship]...';


GO
CREATE PROCEDURE [dbo].[usp_InsActorMovieRelationship]
	@MovieID char(9),
	@ActorID int
AS
	INSERT INTO ActorMovieRelationships (MovieID, ActorID)
	VALUES (@MovieID, @ActorID)
RETURN 0
GO
PRINT N'Creating [dbo].[usp_InsActorTag]...';


GO
CREATE PROCEDURE [dbo].[usp_InsActorTag]
	@TagDescription varchar(20),
	@ActorID int
AS
	INSERT INTO ActorTags(TagDescription, ActorID)
	VALUES (@TagDescription, @ActorID)
RETURN 0
GO
PRINT N'Creating [dbo].[usp_InsMovie]...';


GO
CREATE PROCEDURE [dbo].[usp_InsMovie]
	@MovieID char(9),
	@Title varchar(150),
	@Year datetime2,
	@Rated varchar(5),
	@Released datetime,
	@Genre varchar(50),
	@Director varchar(50),
	@Writer varchar(50),
	@Plot varchar(500),
	@Language varchar(50),
	@Country varchar(10),
	@Awards varchar(250),
	@Poster varchar(500),
	@Metascore int,
	@ImdbRating float,
	@ImdbVotes int,
	@Type varchar(10),
	@Response varchar(10)
AS
	INSERT INTO Movies (MovieID, Title, Year, Rated, Released, Genre, Director, Writer, Plot, Language, Country, Awards, Poster, Metascore, ImdbRating, ImdbVotes, Type, Response)
	VALUES (@MovieID, @Title, @Year, @Rated, @Released, @Genre, @Director, @Writer, @Plot, @Language, @Country, @Awards, @Poster, @Metascore, @ImdbRating, @ImdbVotes, @Type, @Response)
RETURN 0
GO
PRINT N'Creating [dbo].[usp_InsMovieTag]...';


GO
CREATE PROCEDURE [dbo].[usp_InsMovieTag]
	@TagDescription varchar(20),
	@MovieID int
AS
	INSERT INTO MovieTags(TagDescription, MovieID)
	VALUES (@TagDescription, @MovieID)
RETURN 0
GO
PRINT N'Creating [dbo].[usp_UpdActor]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdActor]
	@ActorID int,
	@Name varchar(50),
	@Age int
AS
	UPDATE Actors
	SET Name = @Name, Age = @Age
	WHERE ActorID = @ActorID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_UpdActorTags]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdActorTags]
	@ActorTagID int,
	@TagDescription varchar(20),
	@ActorID int
AS
	UPDATE ActorTags
	SET TagDescription = @TagDescription, ActorID = @ActorID
	WHERE ActorTagID = @ActorTagID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_UpdMovie]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdMovie]
	@MovieID char(9),
	@Title varchar(150),
	@Year datetime2,
	@Rated varchar(5),
	@Released datetime,
	@Genre varchar(50),
	@Director varchar(50),
	@Writer varchar(50),
	@Plot varchar(500),
	@Language varchar(50),
	@Country varchar(10),
	@Awards varchar(250),
	@Poster varchar(500),
	@Metascore int,
	@ImdbRating float,
	@ImdbVotes int,
	@Type varchar(10),
	@Response varchar(10)
AS
	UPDATE Movies
	SET Title = @Title, 
	Year = @Year, 
	Rated = @Rated, 
	Released = @Released, 
	Genre = @Genre, 
	Director = @Director, 
	Writer = @Writer, 
	Plot = @Plot, 
	Language = @Language, 
	Country = @Country, 
	Awards = @Awards, 
	Poster = @Poster, 
	Metascore = @Metascore, 
	ImdbRating = @ImdbRating, 
	ImdbVotes = @ImdbVotes, 
	Type = @Type, 
	Response = @Response

	WHERE MovieID = @MovieID
RETURN 0
GO
PRINT N'Creating [dbo].[usp_UpdMovieTags]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdMovieTags]
	@MovieTagID int,
	@TagDescription varchar(20),
	@MovieID int
AS
	UPDATE MovieTags
	SET TagDescription = @TagDescription, MovieID = @MovieID
	WHERE MovieTagID = @MovieTagID
RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '608c158a-95fa-429e-b140-6300d852fcff')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('608c158a-95fa-429e-b140-6300d852fcff')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c098f4c7-7e76-4444-96aa-89975c354dee')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c098f4c7-7e76-4444-96aa-89975c354dee')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3107593e-d091-403e-b68e-1281dcde83e1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3107593e-d091-403e-b68e-1281dcde83e1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0fa66b28-ce41-460a-a798-b455cac73509')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0fa66b28-ce41-460a-a798-b455cac73509')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5be121bc-2eaf-4795-a49c-886599f52106')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5be121bc-2eaf-4795-a49c-886599f52106')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2a4d7f6b-b483-445b-8709-48d92747e1d7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2a4d7f6b-b483-445b-8709-48d92747e1d7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4f687991-3104-4db0-8b3f-8bbc4e26e5e8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4f687991-3104-4db0-8b3f-8bbc4e26e5e8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6fc9ca9c-a55c-4443-a416-9e965baaa49c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6fc9ca9c-a55c-4443-a416-9e965baaa49c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ec70f665-7671-4739-bbf6-ffb9e8b8efea')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ec70f665-7671-4739-bbf6-ffb9e8b8efea')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e4cb7377-4aae-4ad1-b94f-4f204320d64c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e4cb7377-4aae-4ad1-b94f-4f204320d64c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1dfa49f8-f7ca-483c-bf68-2447b81fb96e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1dfa49f8-f7ca-483c-bf68-2447b81fb96e')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
